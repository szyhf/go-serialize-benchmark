// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8d5c760DecodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson(in *jlexer.Lexer, out *ValMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int":
			out.Int = int(in.Int())
		case "Str":
			out.Str = string(in.String())
		case "Bool":
			out.Bool = bool(in.Bool())
		case "Struct":
			if in.IsNull() {
				in.Skip()
				out.Struct = nil
			} else {
				if out.Struct == nil {
					out.Struct = new(HoldValMsg)
				}
				(*out.Struct).UnmarshalEasyJSON(in)
			}
		case "ByteSlice":
			if in.IsNull() {
				in.Skip()
				out.ByteSlice = nil
			} else {
				out.ByteSlice = in.Bytes()
			}
		case "BoolSlice":
			if in.IsNull() {
				in.Skip()
				out.BoolSlice = nil
			} else {
				in.Delim('[')
				if out.BoolSlice == nil {
					if !in.IsDelim(']') {
						out.BoolSlice = make([]bool, 0, 64)
					} else {
						out.BoolSlice = []bool{}
					}
				} else {
					out.BoolSlice = (out.BoolSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v2 bool
					v2 = bool(in.Bool())
					out.BoolSlice = append(out.BoolSlice, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IntSlice":
			if in.IsNull() {
				in.Skip()
				out.IntSlice = nil
			} else {
				in.Delim('[')
				if out.IntSlice == nil {
					if !in.IsDelim(']') {
						out.IntSlice = make([]int, 0, 8)
					} else {
						out.IntSlice = []int{}
					}
				} else {
					out.IntSlice = (out.IntSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.IntSlice = append(out.IntSlice, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StringSlice":
			if in.IsNull() {
				in.Skip()
				out.StringSlice = nil
			} else {
				in.Delim('[')
				if out.StringSlice == nil {
					if !in.IsDelim(']') {
						out.StringSlice = make([]string, 0, 4)
					} else {
						out.StringSlice = []string{}
					}
				} else {
					out.StringSlice = (out.StringSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.StringSlice = append(out.StringSlice, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StructSlice":
			if in.IsNull() {
				in.Skip()
				out.StructSlice = nil
			} else {
				in.Delim('[')
				if out.StructSlice == nil {
					if !in.IsDelim(']') {
						out.StructSlice = make([]*HoldValMsg, 0, 8)
					} else {
						out.StructSlice = []*HoldValMsg{}
					}
				} else {
					out.StructSlice = (out.StructSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *HoldValMsg
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(HoldValMsg)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.StructSlice = append(out.StructSlice, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IntNeg":
			out.IntNeg = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d5c760EncodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson(out *jwriter.Writer, in ValMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"Str\":"
		out.RawString(prefix)
		out.String(string(in.Str))
	}
	{
		const prefix string = ",\"Bool\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bool))
	}
	{
		const prefix string = ",\"Struct\":"
		out.RawString(prefix)
		if in.Struct == nil {
			out.RawString("null")
		} else {
			(*in.Struct).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ByteSlice\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ByteSlice)
	}
	{
		const prefix string = ",\"BoolSlice\":"
		out.RawString(prefix)
		if in.BoolSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.BoolSlice {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IntSlice\":"
		out.RawString(prefix)
		if in.IntSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.IntSlice {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"StringSlice\":"
		out.RawString(prefix)
		if in.StringSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.StringSlice {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"StructSlice\":"
		out.RawString(prefix)
		if in.StructSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.StructSlice {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IntNeg\":"
		out.RawString(prefix)
		out.Int(int(in.IntNeg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d5c760EncodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d5c760EncodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d5c760DecodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d5c760DecodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson(l, v)
}
func easyjson8d5c760DecodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson1(in *jlexer.Lexer, out *HoldValMsg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int":
			out.Int = int(in.Int())
		case "Str":
			out.Str = string(in.String())
		case "Bool":
			out.Bool = bool(in.Bool())
		case "ByteSlice":
			if in.IsNull() {
				in.Skip()
				out.ByteSlice = nil
			} else {
				out.ByteSlice = in.Bytes()
			}
		case "BoolSlice":
			if in.IsNull() {
				in.Skip()
				out.BoolSlice = nil
			} else {
				in.Delim('[')
				if out.BoolSlice == nil {
					if !in.IsDelim(']') {
						out.BoolSlice = make([]bool, 0, 64)
					} else {
						out.BoolSlice = []bool{}
					}
				} else {
					out.BoolSlice = (out.BoolSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v17 bool
					v17 = bool(in.Bool())
					out.BoolSlice = append(out.BoolSlice, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IntSlice":
			if in.IsNull() {
				in.Skip()
				out.IntSlice = nil
			} else {
				in.Delim('[')
				if out.IntSlice == nil {
					if !in.IsDelim(']') {
						out.IntSlice = make([]int, 0, 8)
					} else {
						out.IntSlice = []int{}
					}
				} else {
					out.IntSlice = (out.IntSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v18 int
					v18 = int(in.Int())
					out.IntSlice = append(out.IntSlice, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StringSlice":
			if in.IsNull() {
				in.Skip()
				out.StringSlice = nil
			} else {
				in.Delim('[')
				if out.StringSlice == nil {
					if !in.IsDelim(']') {
						out.StringSlice = make([]string, 0, 4)
					} else {
						out.StringSlice = []string{}
					}
				} else {
					out.StringSlice = (out.StringSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.StringSlice = append(out.StringSlice, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d5c760EncodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson1(out *jwriter.Writer, in HoldValMsg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"Str\":"
		out.RawString(prefix)
		out.String(string(in.Str))
	}
	{
		const prefix string = ",\"Bool\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bool))
	}
	{
		const prefix string = ",\"ByteSlice\":"
		out.RawString(prefix)
		out.Base64Bytes(in.ByteSlice)
	}
	{
		const prefix string = ",\"BoolSlice\":"
		out.RawString(prefix)
		if in.BoolSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.BoolSlice {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IntSlice\":"
		out.RawString(prefix)
		if in.IntSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.IntSlice {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"StringSlice\":"
		out.RawString(prefix)
		if in.StringSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.StringSlice {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HoldValMsg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d5c760EncodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HoldValMsg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d5c760EncodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HoldValMsg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d5c760DecodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HoldValMsg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d5c760DecodeGithubComSzyhfGoSerializeBenchmarkInternalEasyjson1(l, v)
}
